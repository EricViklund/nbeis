#+title: Electrochemical Surface State Sensing Using Electrochemical Impedance Spectroscopy
#+author: Eric Viklund
#+date: \date
#+STARTUP: latexpreview
#+PROPERTY: header-args:jupyter-python :session py :async yes :kernel sense

* Introduction
*Using* electrochemical impedance spectroscopy, we have devised a method of sensing the microscopic surface conditions on the surface of niobium as it is undergoing an electrochemical polishing (EP) treatment.
* Theory
An alternating voltage is applied to the niobium electrode of the form:

\begin{equation}
E=E_{0}+E_{AC}\sin(\omega*t)
\end{equation}

For small amplitudes of E_{ac}  and assuming the system is operating at a steady-state, the electrode response to the alternating voltage can be described by a linear time-invariant system (LTI). Thus the form of the current must be:

\begin{equation}
I=I_{0}+I_{AC}\cos(\omega*t+\phi)
\end{equation}

The complex impedance of the electrode is determined by the phase difference, \phi, and the ratio of the magnitudes of the AC component of the current and voltage:

\begin{flalign}
& Z=\frac{I_{AC}}{E_{AC}}*e^{j\phi}\\
& or\notag\\
& Z=Z'+jZ''
\end{flalign}

Here we use 'j' as the imaginary unit. Z' and Z'' are the real and imaginary components of Z.



The impedance spectrum of the niobium was deconvolved using the distribution of relaxation times (DRT) method. We consider the electrode as a collection of infinitesimal discrete circuit elements. This is motivated by the fact that the electrode and its surrounding environment is a 3-dimensional object where each point on the elctrode acts independantly from every other part of the elctrode. This is in contrast with the classical view of electrochemical systems that treat the electrodes as homogeneous objects described by a set of discrete curcuit elements.

The fundamental elctrochemical circuit element is the RC circuit, a resistor and a capacitor in parallel, and can be described by it's time constant, \tau=RC. Taking an infinite number of RC circuits in series we obtain what is known as a Voigt circuit. The impedance of an RC circuit and of an infinite Voight circuit is given by the equations:

\begin{flalign}
  Z_{RC}&=\frac{R}{1+j\omega\tau}\\
  Z_{Voigt} &= R + j \omega L + \int_{0}^{\infty} \frac{G(\tau) d \tau}{1 + j \omega \tau}
\end{flalign}

The function G(\tau) is the distribution of relaxation times of the measured system.

It is more convenient to rewrite the integral in a log scale, since EIS measurements are typically performed over multiple orders of magnitude.

\begin{flalign}
  Z=&R+j\omega L+\int_{-\infty}^{\infty}\frac{\gamma(ln\tau)dln\tau}{1+j\omega \tau}
\end{flalign}

To solve for the function \gamma(ln\tau) numerically, we discretize the problem by introducing a test function.

\begin{flalign}
  \gamma(ln\tau)&\approx\sum_{n=0}^{N}x_{n}\phi_{n}(ln\tau)\\
  Z&\approx R+j\omega L+\sum_{n=0}^{N}x_{n}\int_{-\infty}^{\infty}\frac{\phi_{n}(ln\tau)dln\tau}{1+j\omega\tau}
\end{flalign}

or in matrix form:

\begin{flalign}
  Z=& R\mathbf{1}+\mathbf{A'x}+j(\omega L\mathbf{1}+\mathbf{A''x}) \label{eq:Zmatrix}\\
  \mathbf{x}=&[x_0,x_1,\ldots,x_N]^T\\
  \mathbf{A'}=&\int_{-\infty}^{\infty}\frac{\phi_{n}(ln\tau)dln\tau}{1+\omega^2\tau^2}\label{eq:A'}\\
  \mathbf{A''}=&\int_{-\infty}^{\infty}\frac{-\omega\tau\phi_{n}(ln\tau)dln\tau}{1+\omega^2\tau^2}\label{eq:A''}
\end{flalign}

to solve for \mathbf{x} we fit equation~\ref{eq:matrix} to the experimental impedance measurements by minimizing the square difference. The matrix \mathbf{M} is a normalization term to prevent overfitting.

\begin{flalign}
  \min_{\mathbf{x},R,L}[||Z'_{exp}-(R\mathbf{1}+\mathbf{A'x})||^2+||Z''_{exp}-(\omega L\mathbf{1}+\mathbf{A''x})||^2+|\mathbf{xMx}^{T}|]
\end{flalign}





* Experimental
Four samples were measured using the EIS method. To examine the effect of nitrogen doping on the electropolishing reaction, two of the samples were were exposed to nitrogen gas at 800~\unit{\degree\celcius} for two minutes. To test the effect of cold EP, the electrolyte temperature was lowered to 13~\unit{\degree\celsius} during two of the sample measurements.

#+CAPTION: Table
#+CALL: sample_information[]()

#+RESULTS:
: | Serial Number   |   Electrolyte Temperature | Nitrogen Doped   |
: |-----------------+---------------------------+------------------|
: | S35             |                        21 | No               |
: | S68             |                        13 | No               |
: | S67             |                        13 | Yes              |
: | S75             |                        21 | Yes              |


#+begin_src jupyter-python :session py :kernel sense :results file
  import numpy as np
  import h5py
  import matplotlib.pyplot as plt

  mm = 0.03937

  data = h5py.File('./Data/data.hdf5')

  samples = data['samples']

  sample_serial_numbers = samples.keys()

  fig = plt.figure(figsize=(7,12))
  subfigs = fig.subfigures(nrows=4,ncols=1)

  for row, sample_serial_number in enumerate(sample_serial_numbers):
      sample_data = samples[sample_serial_number+'/data']


      subfig = subfigs[row]
      subfig.suptitle('Sample Serial Number: '+sample_serial_number)

      re_ax, im_ax = subfig.subplots(nrows=1, ncols=2)    

      re_ax.set_xscale('log')
      im_ax.set_xscale('log')


      for cycle in sample_data.keys():
          cycle_data = sample_data[cycle]

          freq = np.array(cycle_data['freq'])
          ReZ = np.array(cycle_data['ReZ'])
          ImZ = np.array(cycle_data['ImZ'])

          re_ax.scatter(freq,ReZ+int(cycle),marker='x',s=5)
          im_ax.scatter(freq,ImZ+int(cycle),marker='x',s=5)

          re_ax.set_ylim(0,40)
          im_ax.set_ylim(-10,30)

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/87746b76071a488f0ac7fa8dbe8a932e1b111f06.png]]



* Calculations

** Test Function

To discretize the DRT function, we use a set of Gaussian test functions evenly spaced on the log scale.

\begin{flalign}
  \phi_{n}(ln\tau) &= x_{n}e^{\frac{ln\tau-ln\tau_{n}}{\mu}}
\end{flalign}

For a series of impedance measurements measured at frequencies (f_{1},f_{2} \ellipses f_{m} \ellipses f_{M}) in a descending frequency order and equally spaced in on the log frequency scale, the centers of the gaussian test functions, ln\tau_{n} are chosen to be 1/f_{m}. We note that this is an arbitrary decission chosen for convenience and the spacing between test functions and the total number of test functions used can take any value. However, changing the spacing to larger or smaller values or adding test functions outside the range of measured frequencies would have no real physical meaning.

The width, \mu, of the gaussian function is set such that the full width at half maximum (FWHM) is equal to ln\tau_{n+1}-ln\tau_{n-1}. This ensures a good compromise between being able to fit rapidly changing regions of the DRT function and having enough overlapping regions between neighboring test functions.

#+begin_src jupyter-python
  import numpy as np
  from scipy.special import hermite

  def Gaussian_Func(x,sigma):
      y = np.exp(-x**2/(2*sigma**2)) / (2.5066*sigma)
      return y

  def Gaussian_Derivative(x,n,sigma):
      hermite_poly = hermite(n)
      y = (-1)**n * Gaussian_Func(x,sigma) * hermite_poly(x/sigma) * (1/sigma)**n
      return y

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
: Cell [0;32mIn[3], line 2[0m
: [1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
: [0;32m----> 2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mspecial[39;00m [38;5;28;01mimport[39;00m hermite
: [1;32m      4[0m [38;5;28;01mdef[39;00m [38;5;21mGaussian_Func[39m(x,sigma):
: [1;32m      5[0m     y [38;5;241m=[39m np[38;5;241m.[39mexp([38;5;241m-[39mx[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m[38;5;241m/[39m([38;5;241m2[39m[38;5;241m*[39msigma[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m)) [38;5;241m/[39m ([38;5;241m2.5066[39m[38;5;241m*[39msigma)
: 
: [0;31mModuleNotFoundError[0m: No module named 'scipy'
:END:

** Numerical Integration of \mathbf{A'} and \mathbf{A''}

To calculate the matrices \mathbf{A'} and \mathbf{A''}, the integral~\ref{eq:A'} and~ \ref{eq:A''} must be integrated numerically. This calculation is performed using the Gaussian quadrature method.

\begin{flalign}
  \int_{a}^{b}f(x)dx \approx & \frac{b-a}{2} \sum_{i=1}^{n}w_{i}f(\frac{b-a}{2}\xi_{i}+\frac{b-a}{2})
\end{flalign}

Here \xi are the roots of the n-th Legendre polynomial and w are the weights are calculated from the derivative of the n-th Legendre polynomial using the equation

\begin{flalign}
  w_{i} =& -\frac{2}{(1-\xi_{i}^{2})(P'_{n}(\xi_{i}))}
\end{flalign}

#+begin_src jupyter-python
  import numpy as np

  def quad(f, a, b, n=5):
      # Generate the quadrature rule coefficients from the numbpy library
      x, w = np.polynomial.legendre.leggauss(n)
    
      # Scale the quadrature points and weights to the interval [a, b]
      x_scaled = 0.5 * (b - a) * x + 0.5 * (b + a)
      w_scaled = 0.5 * (b - a) * w
    
      # Evaluate the function at the quadrature points and sum up the weighted contributions
      integral = np.sum(w_scaled[:,None] * f(x_scaled),axis=0)
    
      return integral

#+end_src

#+RESULTS:




* Conclusion
This study shows that EIS measurements can be used to differentiate the eching and polishing regimes in niobium EP
* Supplemental Information
The EIS measurements were performed using a BioLogic VSP-300 potentiostat

** Data Pre-Processing
EIS data from the potentiostat is exported as a series of text files, one for each sample, containing the electrode potential, current, frequency, impedance, and run number, which indicates which voltage step the measurement was performed at. To make the data more manageable, we convert the data into a hierarchical data format (HDF5). 

To accomplish this we use the numpy python library to load the text files into arrays, and the h5py library to create the HDF5 file.

#+NAME: initialization
#+begin_src jupyter-python
  import numpy as np
  import h5py
  import os
  import pandas as pd
  from tabulate import tabulate
#+end_src

#+RESULTS: initialization

#+RESULTS:

First we create a new file to store all the data.

#+begin_src jupyter-python :noweb yes
  import os
  import h5py
  filename = 'Data/data.hdf5'
  if os.path.exists(filename):
      os.remove(filename)
  f = h5py.File(filename,'a')
  print(f)
#+end_src

#+RESULTS:
: <HDF5 file "data.hdf5" (mode r+)>

Then we create a group to contain each of the samples.

#+begin_src jupyter-python
  samples = f.require_group("samples") #
  print(samples)
#+end_src

#+RESULTS:
: <HDF5 group "/samples" (0 members)>

We create the metadata strings for each of the samples in the Data directory.

#+NAME: sample_information
#+begin_src jupyter-python :results table
  from tabulate import tabulate
  import pandas as pd

  d = {'Serial Number': ["S35","S68","S67","S75"],
       'Electrolyte Temperature': [21,13,13,21],
       'Nitrogen Doped': ['No','No','Yes','Yes']}

  df = pd.DataFrame(data=d)

  print(tabulate(df, headers="keys", showindex=False, tablefmt="orgtbl"))

#+end_src

#+RESULTS: sample_information
: | Serial Number   |   Electrolyte Temperature | Nitrogen Doped   |
: |-----------------+---------------------------+------------------|
: | S35             |                        21 | No               |
: | S68             |                        13 | No               |
: | S67             |                        13 | Yes              |
: | S75             |                        21 | Yes              |

#+begin_src jupyter-python
  import numpy as np

  for i, sample in enumerate(df['Serial Number']):
      f.create_dataset('samples/'+sample+'/electrolyte_temperature', data=np.asarray(df['Electrolyte Temperature']))
      f.create_dataset('samples/'+sample+'/nitrogen_doped', data=np.asarray(df['Nitrogen Doped']))
#+end_src

#+RESULTS:

We load the text files containing the EIS data

#+begin_src jupyter-python
  import os
  import re

  # get the list of files and directories in the raw data  directory
  directory = 'Data/text_files/'
  text_files = os.listdir(directory)

  # get the samples from the data file
  samples = f['samples']

  # add the data to each sample
  for file in text_files:
      for sample in samples:
          if file.startswith(sample):
              data = pd.read_csv(directory+file,delimiter='\t')
              data = data.drop('Unnamed: 6', axis=1)

              Ewe = np.asarray(data['<Ewe>/V'])
              I = np.asarray(data['<I>/mA'])
              ImZ = np.asarray(-data['-Im(Z)/Ohm'])
              ReZ = np.asarray(data['Re(Z)/Ohm'])
              freq = np.asarray(data['freq/Hz'])
              cycle_number = np.asarray(data['cycle number'],dtype='uint8')

              nonzero_measurements = np.where(freq!=0)

              Ewe = Ewe[nonzero_measurements]
              I = I[nonzero_measurements]
              ImZ = ImZ[nonzero_measurements]
              ReZ = ReZ[nonzero_measurements]
              freq = freq[nonzero_measurements]
              cycle_number = cycle_number[nonzero_measurements]

              for cycle in range(cycle_number.min(),cycle_number.max()):

                  cycle_measurements = np.where(cycle_number == cycle)

                  samples[sample].create_dataset('data/'+str(cycle)+'/Ewe',data=np.asarray(Ewe[cycle_measurements]))
                  samples[sample].create_dataset('data/'+str(cycle)+'/I',data=np.asarray(I[cycle_measurements]))
                  samples[sample].create_dataset('data/'+str(cycle)+'/ImZ',data=np.asarray(ImZ[cycle_measurements]))
                  samples[sample].create_dataset('data/'+str(cycle)+'/ReZ',data=np.asarray(ReZ[cycle_measurements]))
                  samples[sample].create_dataset('data/'+str(cycle)+'/freq',data=np.asarray(freq[cycle_measurements]))
#+end_src

#+RESULTS:

